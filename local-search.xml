<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>递归</title>
    <link href="/posts/oi-wiki/basic-algorithm/recursion/"/>
    <url>/posts/oi-wiki/basic-algorithm/recursion/</url>
    
    <content type="html"><![CDATA[<h2 id="定义">定义</h2><p>递归，在数学和计算机科学中是指在函数的定义中使用函数自身的方法，在计算机科学中还额外指一种通过重复将问题分解为同类的子问题而解决问题的方法。</p><h2 id="理解">理解</h2><p>对于一个待求解的问题，当它局限在某处边界、某个小范围或者某种特殊情形下时，其答案往往是容易获得的。<br>如果能够以原问题为起点，尝试把问题的状态空间缩小到容易获得答案的问题边界，并且收缩过程的每个步骤具有相似性。<br>那么在获得问题边界的答案后，就可以通过反向回溯的方式获得原问题的答案。<br>这种解决问题的方法就是递归。</p><blockquote><p>这里提到<strong>收缩过程的每个步骤应该具有相似性</strong>，因为这样才能够保证，我们只需要设计一段程序，就能够重复作用于问题求解的每个步骤。<br>这就要求程序在每个步骤上应该处理的是相同种类的问题，这些问题都是原问题的一个子问题，可能只是在规模上或者某些限制条件上有所区别，并且这些问题的处理方式与原问题应该是相似的。</p></blockquote><h2 id="算法过程">算法过程</h2><p>递归算法的执行过程包括三个部分：</p><ol><li>缩小当前问题状态空间的规模，这表示程序尝试把当前问题转换为与其相似但规模更小的一个子问题，并期望能够解决这一子问题，进而解决当前问题。</li><li>尝试解决规模更小的子问题，这有可能成功，也可能失败。<blockquote><p>这里由于子问题与原问题是相似的，只是规模更小，那么在求解子问题时，可以把它视为一个新的“原问题”，由相同的程序进行求解，这就是定义中的“<strong>自身调用自身</strong>”。如果子问题已经来到了问题边界，那么可以直接获得子问题的答案或者判定子问题无解。</p></blockquote></li><li>如果成功解决子问题，那么将子问题的答案扩展到当前问题，就可以得到当前问题的答案。如果不能解决子问题，那么重新回到当前问题，程序可能会继续寻找当前问题的其他转换路线，直至最终解决当前问题或者确定当前问题无解。<blockquote><p>如果求解子问题失败，程序需要重新回到当前问题重新寻找其他转换路线，因此在之前尝试的转换过程中对当前问题状态产生影响的操作应该全部失效，这就要求“<strong>回溯时还原现场</strong>”，这一点在之后递归的应用中会涉及到。</p></blockquote></li></ol><h2 id="代码模板">代码模板</h2><p>在代码层面上，递归有最重要的两个特征：</p><ol><li><strong>结束条件</strong>：说明了最简子问题限制条件，当问题规模收缩到这一条件时，可以直接获得问题的答案或者判定问题无解。</li><li><strong>自身调用</strong>：当原问题转换为一个子问题之后，调用自身程序，进一步解决子问题。</li></ol><p>递归代码的一般形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(参数列表)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(结束条件)&#123;<br>        ... <span class="hljs-comment">// 直接获得最简子问题的答案 或者 判定问题无解</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    ... <span class="hljs-comment">// 将当前问题转换为规模更小的子问题</span><br>    <span class="hljs-built_in">func</span>(子问题的参数列表); <span class="hljs-comment">// 调用自身程序解决子问题</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="具体应用">具体应用</h2><h3 id="递归实现指数型枚举">递归实现指数型枚举</h3><p>从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>这<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个整数中随机选取任意多个，输出所有可能的选择方案。(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>&lt;</mo><mn>20</mn></mrow><annotation encoding="application/x-tex">n &lt; 20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">20</span></span></span></span>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans; <span class="hljs-comment">// 存放所有可能的选择方案</span><br>vector&lt;<span class="hljs-type">int</span>&gt; arr; <span class="hljs-comment">// 存放当前正在寻找的一种选择方案</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span>&#123;<br>    <span class="hljs-comment">// 结束条件：前n个数已经选择完毕，形成一种选择方案</span><br>    <span class="hljs-keyword">if</span>(num &gt; n)&#123;<br>        ans.<span class="hljs-built_in">push_back</span>(arr);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 不选择当前数字num</span><br>    <span class="hljs-built_in">solve</span>(num + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 选择当前数字num</span><br>    arr.<span class="hljs-built_in">push_back</span>(num);<br>    <span class="hljs-built_in">solve</span>(num + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 回溯时还原现场</span><br>    arr.<span class="hljs-built_in">pop_back</span>(num);<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归实现组合型枚举">递归实现组合型枚举</h3><p>从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>这<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个整数中随机选取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>个，输出所有可能的选择方案。(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mi>n</mi><mo>&lt;</mo><mn>20</mn></mrow><annotation encoding="application/x-tex">0 \leq m \leq n &lt; 20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">20</span></span></span></span>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans; <span class="hljs-comment">// 存放所有可能的选择方案</span><br>vector&lt;<span class="hljs-type">int</span>&gt; arr; <span class="hljs-comment">// 存放当前正在寻找的一种选择方案</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span>&#123;<br>    <span class="hljs-comment">// 限制条件：已选择的数个数超过m 或者 已选择的数和剩余的数个数总和达不到m，直接回溯</span><br>    <span class="hljs-keyword">if</span>(arr.<span class="hljs-built_in">size</span>() &gt; m || arr.<span class="hljs-built_in">size</span>() + (n - num + <span class="hljs-number">1</span>) &lt; m)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 结束条件：前n个数已经选择完毕，形成一种选择方案</span><br>    <span class="hljs-keyword">if</span>(num &gt; n)&#123;<br>        ans.<span class="hljs-built_in">push_back</span>(arr);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 不选择当前数字num</span><br>    <span class="hljs-built_in">solve</span>(num + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 选择当前数字num</span><br>    arr.<span class="hljs-built_in">push_back</span>(num);<br>    <span class="hljs-built_in">solve</span>(num + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 回溯时还原现场</span><br>    arr.<span class="hljs-built_in">pop_back</span>(num);<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归实现排列型枚举">递归实现排列型枚举</h3><p>给定从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个整数，将这<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个整数排列成一行，输出所有可能的排列方案。(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>&lt;</mo><mn>20</mn></mrow><annotation encoding="application/x-tex">n &lt; 20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">20</span></span></span></span>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans; <span class="hljs-comment">// 存放所有可能的排列方案</span><br>vector&lt;<span class="hljs-type">int</span>&gt; arr; <span class="hljs-comment">// 存放当前正在寻找的一种排列方案</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vis</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// 标识n个整数哪些已经在当前排列中使用过（对应位置设为1），哪些还未在当前排列中使用过（对应位置设为0）</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> step)</span></span>&#123;<br>    <span class="hljs-comment">// 结束条件：n个数已经形成一种排列方案</span><br>    <span class="hljs-keyword">if</span>(step &gt; n)&#123;<br>        ans.<span class="hljs-built_in">push_back</span>(arr);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历1~n，如果某个数i还没有在当前排列中使用过，就把i置于排列的第step个位置</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(!vis[i])&#123;<br>            vis[i] = <span class="hljs-number">1</span>;<br>            arr.<span class="hljs-built_in">push_back</span>(i);<br>            <span class="hljs-built_in">solve</span>(step + <span class="hljs-number">1</span>);<br><br>            <span class="hljs-comment">// 回溯时还原现场</span><br>            vis[i] = <span class="hljs-number">0</span>;<br>            arr.<span class="hljs-built_in">pop_back</span>(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OI-Wiki</category>
      
      <category>基础算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/hello-world/"/>
    <url>/posts/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
